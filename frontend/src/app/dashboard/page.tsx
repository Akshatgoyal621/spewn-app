"use client";

import React, {useEffect, useMemo, useState} from "react";
import {useRouter} from "next/navigation";
import {useAuth} from "../../lib/auth-client";
import {Modal} from "@/modals/Modal";
import {DonutChart} from "@/charts/DonutChart";
import {exportPrintable} from "@/docgen/ExportPrintable";

/**
 * Dashboard with:
 *  - donut + small bar chart (pure SVG)
 *  - export-to-pdf via opening a printable window (window.print)
 *  - modal per category that shows transaction history
 *
 * Keep it dependency-free and simple so it's easy to adapt.
 */

/* ----------------------------- Helpers --------------------------------- */

function formatCurrency(amount: number | null | undefined) {
  if (amount == null || Number.isNaN(Number(amount))) return "—";
  return new Intl.NumberFormat("en-IN", {
    style: "currency",
    currency: "INR",
    maximumFractionDigits: 0,
  }).format(Number(amount));
}

/** Sum utility for splits */
function sumSplits(splits: Record<string, number>) {
  return Object.values(splits).reduce((a, b) => a + Number(b || 0), 0);
}

/* ---------------------------- BarMiniChart -----------------------------
   Small horizontal bars for quick percent visualization; pure CSS widths.
*/
function BarMini({pct}: {pct: number}) {
  const safe = Math.max(0, Math.min(100, pct));
  return (
    <div className="w-full bg-slate-100 rounded-full h-2 overflow-hidden">
      <div
        style={{
          width: `${safe}%`,
          background: "linear-gradient(90deg,#06b6a4,#0ea5a3)",
        }}
        className="h-2 rounded-full"
      />
    </div>
  );
}

/* ----------------------------- Modal UI --------------------------------
   Simple modal: controlled by parent. Accessible-ish (focus not fully managed,
   but keyboard Escape closes).
*/

/* --------------------------- Main Dashboard ----------------------------- */

export default function DashboardPage() {
  return <DashboardInner />;
}

function DashboardInner() {
  const {user} = useAuth();
  const router = useRouter();

  const [loading, setLoading] = useState(true);
  const [distribution, setDistribution] = useState<Record<
    string,
    number
  > | null>(null);

  // UI: modal state
  const [modalOpen, setModalOpen] = useState(false);
  const [modalCategory, setModalCategory] = useState<string | null>(null);

  useEffect(() => {
    setLoading(true);

    if (!user) {
      setDistribution(null);
      setLoading(false);
      return;
    }

    // Prefer server-persisted distribution
    if (
      user.distribution &&
      typeof user.distribution === "object" &&
      Object.keys(user.distribution).length
    ) {
      setDistribution(user.distribution);
      setLoading(false);
      return;
    }

    // Fallback: compute locally
    try {
      const salaryNum = Number(user.salary ?? 0);
      const splits = user.splits ?? {};
      const keys = Object.keys(splits);
      if (salaryNum <= 0 || keys.length === 0) {
        setDistribution(null);
      } else {
        const comp: Record<string, number> = {};
        keys.forEach((k) => {
          comp[k] = Math.round((salaryNum * Number(splits[k] ?? 0)) / 100);
        });
        setDistribution(comp);
      }
    } catch (e) {
      console.error(e);
      setDistribution(null);
    } finally {
      setLoading(false);
    }
  }, [user]);

  function onEdit() {
    router.push("/onboarding");
  }

  // Build data for charts from splits
  const chartData = useMemo(() => {
    if (!user?.splits) return [];
    return Object.keys(user.splits).map((k) => ({
      key: k,
      value: Number(user.splits[k] ?? 0),
    }));
  }, [user?.splits]);

  // prepare printable HTML for export
  function handleExport() {
    const rows = Object.keys(user?.splits ?? {})
      .map((k) => {
        const pct = Number(user!.splits[k]) ?? 0;
        const amt = distribution ? distribution[k] ?? 0 : 0;
        return `<div class="card row"><div>${k.replace(
          "_",
          " / "
        )} — ${pct}%</div><div>${formatCurrency(amt)}</div></div>`;
      })
      .join("\n");

    const html = `
      <h1>SPEWN — Salary distribution</h1>
      <p>${user?.name ?? ""} • Preset: ${
      user?.preset ?? "—"
    } • Salary: ${formatCurrency(Number(user?.salary ?? 0))}</p>
      <div style="margin-top:12px">${rows}</div>
      <div style="margin-top:18px; font-size:12px; color:#666">Generated by SPEWN</div>
    `;

    exportPrintable({title: "SPEWN distribution", html});
  }

  // open modal for category — prefills title and uses user.history if available
  function openCategoryModal(category: string) {
    setModalCategory(category);
    setModalOpen(true);
  }

  // find history array for a category (expecting user.history shaped as { [category]: [{date, amount, note}] })
  function getHistoryFor(category: string) {
    if (!user) return [];
    // try user.history, otherwise create placeholder recent transactions
    const raw = (user as any).history;
    if (raw && typeof raw === "object" && Array.isArray(raw[category])) {
      return raw[category];
    }
    // placeholder: random small entries to show sample
    return [
      {
        date: new Date().toLocaleDateString(),
        amount: Math.round((distribution?.[category] ?? 0) * 0.6 || 0),
        note: "Sample expense",
      },
      {
        date: new Date(
          Date.now() - 1000 * 60 * 60 * 24 * 7
        ).toLocaleDateString(),
        amount: Math.round((distribution?.[category] ?? 0) * 0.4 || 0),
        note: "Sample transfer",
      },
    ];
  }

  if (!user) {
    return (
      <main className="py-8 px-4">
        <div className="rounded-2xl p-6 bg-white border border-gray-100 shadow-sm text-center">
          <div className="text-lg font-semibold text-slate-700">
            Loading profile…
          </div>
          <div className="text-sm text-slate-500 mt-2">
            We’re fetching your info — one moment.
          </div>
        </div>
      </main>
    );
  }

  return (
    <main className="py-8 px-4 lg:px-12">
      {/* header */}
      <div className="flex flex-col md:flex-row md:justify-between md:items-start gap-4">
        <div>
          <h1 className="text-2xl font-bold text-slate-900">
            Welcome, <span className="text-teal-600">{user.name}</span>
          </h1>
          <p className="text-sm text-slate-600 mt-1">
            Here’s how your salary is distributed this month.
          </p>
        </div>

        <div className="flex items-center gap-3">
          <div className="text-sm text-slate-600">
            <div>
              Preset:{" "}
              <span className="font-medium text-slate-800">
                {user.preset.toUpperCase() ?? "—"}
              </span>
            </div>
            <div className="mt-1">
              Salary:{" "}
              <span className="font-medium text-slate-800">
                {formatCurrency(Number(user.salary ?? 0))}
              </span>
            </div>
          </div>
          <button
            onClick={onEdit}
            className="rounded-full bg-slate-100 px-4 py-2 text-sm font-medium hover:bg-slate-200 transition"
          >
            Edit inputs
          </button>
          <button
            onClick={handleExport}
            className="rounded-full bg-teal-500 text-white px-4 py-2 text-sm font-medium hover:bg-teal-600 transition"
          >
            Export PDF
          </button>
        </div>
      </div>

      <section className="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left column: Donut + legend */}
        <div className="col-span-1 bg-white border border-gray-100 rounded-2xl p-5 shadow-sm">
          <div className="flex items-center gap-4">
            <DonutChart data={chartData} size={120} />
            <div className="ml-2">
              <div className="text-sm text-slate-600">Distribution</div>
              <div className="mt-3 space-y-2">
                {chartData.map((d, i) => (
                  <div key={d.key} className="flex items-center gap-3 text-sm">
                    <span
                      style={{
                        width: 12,
                        height: 12,
                        borderRadius: 3,
                        background: [
                          "#06b6a4",
                          "#0ea5a3",
                          "#f59e0b",
                          "#ec4899",
                          "#3b82f6",
                        ][i % 5],
                      }}
                    />
                    <div className="flex-1">{d.key.replace("_", " / ")}</div>
                    <div className="font-medium">{d.value}%</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Middle + Right: cards grid (spans 2 columns on large screens) */}
        <div className="col-span-2 grid grid-cols-1 md:grid-cols-2 gap-4">
          {loading ? (
            <div className="col-span-full rounded-xl bg-white p-6 border border-gray-100 shadow-sm text-center">
              Computing distribution…
            </div>
          ) : !distribution || Object.keys(distribution).length === 0 ? (
            <div className="col-span-full rounded-xl bg-white p-6 border border-dashed border-gray-200 text-center text-slate-500">
              <div className="text-sm">No distribution available yet.</div>
              <div className="mt-3 text-xs text-slate-400">
                Head to Onboarding to set your salary and splits.
              </div>
            </div>
          ) : (
            Object.keys(user.splits || {}).map((k) => {
              const pct = Number(user.splits[k]) ?? 0;
              const amt = distribution ? distribution[k] ?? 0 : 0;
              return (
                <article
                  key={k}
                  onClick={() => openCategoryModal(k)}
                  className="bg-white rounded-2xl p-4 border border-gray-100 shadow-sm hover:shadow-md transition transform hover:-translate-y-0.5 cursor-pointer"
                >
                  <div className="flex justify-between">
                    <div>
                      <div className="text-xs text-slate-500">
                        {k.replace("_", " / ")}
                      </div>
                      <div className="mt-1 text-lg font-semibold text-slate-800">
                        {pct}%
                      </div>
                    </div>

                    <div className="text-right">
                      <div className="text-teal-600 font-semibold text-lg">
                        {formatCurrency(amt)}
                      </div>
                      <div className="text-xs text-slate-400">Amount</div>
                    </div>
                  </div>

                  <div className="mt-4">
                    <BarMini pct={pct} />
                    <div className="mt-3 flex justify-between items-center">
                      <div className="text-xs text-slate-500">
                        Tip: click to view recent activity
                      </div>
                      <div className="text-xs text-slate-400">View</div>
                    </div>
                  </div>
                </article>
              );
            })
          )}
        </div>
      </section>

      {/* Modal: show history for the selected category */}
      <Modal
        open={modalOpen}
        title={modalCategory ? modalCategory.replace("_", " / ") : "History"}
        onClose={() => setModalOpen(false)}
      >
        {/* Render history inside the modal: parent is responsible for data/formatting */}
        {modalCategory ? (
          <div className="space-y-3">
            <div className="text-sm text-slate-600">
              Recent activity for {modalCategory.replace("_", " / ")}
            </div>
            <div className="divide-y">
              {getHistoryFor(modalCategory).map((tx: any, idx: number) => (
                <div
                  key={idx}
                  className="py-3 flex justify-between items-start"
                >
                  <div>
                    <div className="text-sm font-medium">
                      {tx.note ?? "Transaction"}
                    </div>
                    <div className="text-xs text-slate-400">{tx.date}</div>
                  </div>
                  <div className="text-sm font-semibold">
                    {/* formatCurrency(tx.amount) */}
                    {tx.amount}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="text-sm text-slate-500">No category selected.</div>
        )}
      </Modal>
    </main>
  );
}
